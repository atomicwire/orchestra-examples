plugins {
  id 'io.atomicwire.gradle.orchestra'
  id 'org.openapi.generator'
}

orchestra {
  specification {
    // spec derived from fix-latest
    markdown {
      reference orchestraHub(name: 'fix-latest', version: 'ep292')

      enableSpotless()
    }

    // In order to generate a JSON schema for an Orchestra spec, additional type information is required that indicates
    // which JSON datatype corresponds to each datatype in the Orchestra spec.
    encoding {
      datatypeMapping([
        int: [
          JSON: 'number',
        ],
        String: [
          JSON: 'string',
        ],
        Pattern: [
          JSON: 'string',
        ]
      ])
    }
  }

  // Generate a JSON Schema for inclusion in the OpenAPI spec
  jsonSchema {
    namespace = 'org.example.orchestra'
  }
}

// Colocate the two files so that the provided openapi.yaml can easily reference Schemas from the
// generated schemas.json file
def colocateFiles = tasks.register('colocateOpenApiFiles', Copy) {
  from(orchestraGenerateJsonSchema) {
    rename { 'schemas.json' }
  }
  from 'openapi.yaml'

  into layout.buildDirectory.dir('tmp/openapi')
}

// Configure an off-the-shelf OpenAPI documentation generator
tasks.openApiGenerate {
  inputs.dir(colocateFiles.map { it.destinationDir })
  inputSpec = colocateFiles.map {it.destinationDir.toPath().resolve('openapi.yaml').toString() }
  generatorName = 'html2'
  outputDir = layout.buildDirectory.dir('openapi').get().toString()
}

tasks.named('runExample') {
  dependsOn tasks.named('openApiGenerate')

  doLast {
    println "OpenAPI documentation generated in ${tasks.openApiGenerate.outputDir.get()}"
  }
}

