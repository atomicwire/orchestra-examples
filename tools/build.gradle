plugins {
  id 'java'
  id 'io.atomicwire.gradle.orchestra'
}

dependencies {

  // Orchestra Java library
  implementation libs.orchestra.core

  // Orchestra Java plugins for FIX 4.4
  implementation platform(libs.orchestra.specs.bom)
  implementation libs.orchestra.spec.fix44.plugins

  // Picocli
  implementation libs.picocli

  // Jakarta Annotation API
  implementation libs.jakarta.annotation.api

  // Lombok
  annotationProcessor libs.lombok
  compileOnly libs.lombok
  testAnnotationProcessor libs.lombok
  testCompileOnly libs.lombok

  // Logging
  implementation libs.slf4j.api
  runtimeOnly libs.bundles.log4j

}

orchestra {
  specification {
    name = 'fix-4.4'
    repository orchestraHub(group: 'atomicwire', name: 'fix-4.4-enriched', version: '4.4')
  }

  java {
    packaging {
      enabled = false
    }

    codeGen {
      packageName = 'org.example.orchestra.fix44'
    }
  }
}

spotless {
  java {
    // Exclude generated Java sources from style enforcement
    targetExclude "${layout.projectDirectory.getAsFile().relativePath(orchestra.java.codeGen.outputDir.get().asFile)}/**" as String
  }
}

tasks.register('generateBasicAppExampleData', JavaExec) {
  def outputFile = layout.buildDirectory.file('generated-data.txt')
  outputs.file outputFile

  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'org.example.orchestra.DataGeneratorCli'
  args \
    '--message-count', 10_000, \
    '--output-file', outputFile.get()
}

tasks.named('test', Test) {
  useJUnitPlatform()
}
