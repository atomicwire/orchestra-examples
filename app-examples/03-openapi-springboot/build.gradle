import org.openapitools.generator.gradle.plugin.tasks.GenerateTask
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
  id 'application'
  id 'io.atomicwire.gradle.orchestra'
  id 'org.openapi.generator'
  id 'org.springframework.boot'
}

configurations {
  openApiSpringBootScaffolding {
    canBeConsumed = true
    canBeResolved = false
  }
}

dependencies {

  // Spring Boot BOM
  implementation platform(SpringBootPlugin.BOM_COORDINATES)
  annotationProcessor platform(SpringBootPlugin.BOM_COORDINATES)
  testAnnotationProcessor platform(SpringBootPlugin.BOM_COORDINATES)

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

}

orchestra {
  specification {
    markdown {
      reference orchestraHub(name: 'fix-latest', version: 'ep293')
      enableSpotless()
    }

    // Specify the corresponding JSON datatype for each datatype in the Orchestra specification.
    encoding {
      datatypeMapping([
        int: [
          JSON: 'number',
        ],
        String: [
          JSON: 'string',
        ],
        Pattern: [
          JSON: 'string',
        ]
      ])
    }
  }

  // Generate a JSON Schema for inclusion in the OpenAPI specification
  jsonSchema {
    namespace = 'org.example.orchestra'
  }
}

// Colocate the two files so that the provided openapi.yaml can easily reference Schemas from the
// generated schemas.json file
def colocateOpenApiFiles = tasks.register('colocateOpenApiFiles', Copy) {
  from(orchestraGenerateJsonSchema) {
    rename { 'schemas.json' }
  }
  from 'openapi.yaml'

  into layout.buildDirectory.dir('tmp/openapi')
}

def generatedSourceDir = layout.buildDirectory.dir('generated/sources/openapi-springboot')

// Configure the OpenAPI Generator
def openApiGenerate = tasks.named('openApiGenerate', GenerateTask) {
  inputs.dir(colocateOpenApiFiles.map { it.destinationDir })
  inputSpec = colocateOpenApiFiles.map {"${it.destinationDir}/openapi.yaml" as String }

  generatorName = 'spring'

  // configure the package name
  def basePackage = 'org.example.orchestra.springboot'
  invokerPackage = basePackage
  modelPackage = "${basePackage}.model"
  apiPackage = "${basePackage}.api"
  configOptions.putAll(configPackage: "${basePackage}.config")

  configOptions.putAll(
    // generate Api Delegate classes to enable simple implementation by providing a spring Bean
    delegatePattern: 'true',
    useSpringBoot3: 'true',
  )

  // skip generating some extraneous things
  generateApiDocumentation  = false
  openapiGeneratorIgnoreList = ['pom.xml', 'src/test/']
  configOptions.putAll([
    documentationProvider: 'none',
    openApiNullable: 'false',
  ])

  outputDir = generatedSourceDir.get().toString()
}

sourceSets {
  main {
    java {
      srcDir openApiGenerate
    }
  }
}

// Exclude generated code from spotless
spotless {
  java {
    targetExclude "${layout.projectDirectory.getAsFile().relativePath(generatedSourceDir.get().asFile)}/**" as String
  }
}
