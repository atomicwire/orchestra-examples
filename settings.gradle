pluginManagement {
  plugins {
    id 'com.bmuschko.docker-remote-api' version '9.4.0'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.github.davidmc24.gradle.plugin.avro-base' version '1.9.1'
    id 'io.atomicwire.gradle.orchestra' version '0.1.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.openapi.generator' version '7.8.0'
    id 'org.springframework.boot' version '3.3.3'
  }

  def credentialsProps = new Properties()

  def credentialsFile = file("${rootDir}/maven-credentials.properties")
  if (credentialsFile.exists()) {
    credentialsFile.withInputStream {
      credentialsProps.load(it)
    }
  }

  def mavenUsername = credentialsProps.getProperty('atomicwire-maven-username', '')
  def mavenPassword = credentialsProps.getProperty('atomicwire-maven-password', '')

  if (mavenUsername == '' || mavenPassword == '') {
    throw new GradleException('Atomic Wire Maven username or password unset, please see the README.md for more information')
  }

  repositories {
    gradlePluginPortal()

    maven {
      name = 'atomicwire'
      url = uri('https://maven.atomicwire.dev/external')
      credentials {
        username = mavenUsername
        password = mavenPassword
      }
    }
  }
}

rootProject.name = 'orchestra-examples'

include ':app-examples:orchestra-specs:fix-44'
include ':app-examples:01-basic'
include ':app-examples:02-quickfix'
include ':app-examples:03-openapi-springboot'

include ':basic-examples:01-orchestra-hub'
include ':basic-examples:02-markdown'
include ':basic-examples:03-derived'
include ':basic-examples:04-documentation'
include ':basic-examples:05-avro-schema'
include ':basic-examples:06-json-schema'
include ':basic-examples:07-java'
include ':basic-examples:08-quickfix'
include ':basic-examples:09-openapi'

include ':tools'
