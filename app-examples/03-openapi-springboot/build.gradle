import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
  id 'application'

  id 'io.spring.dependency-management'
  id 'org.openapi.generator'
  id 'org.springframework.boot'
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.data', name: 'spring-data-jpa'
}

def generatedSourceDir = layout.buildDirectory.dir('generated/sources/openapi-springboot')

// Configure the OpenAPI Generator
def openApiGenerate = tasks.named('openApiGenerate', GenerateTask) {
  // use the OpenAPI files from basic-examples/09-openapi
  def colocateOpenApiFiles = project(':basic-examples:09-openapi').tasks.named('colocateOpenApiFiles', Copy)
  inputs.dir(colocateOpenApiFiles.map { it.destinationDir })
  inputSpec = colocateOpenApiFiles.map {"${it.destinationDir}/openapi.yaml" as String }

  generatorName = 'spring'

  // configure the package name
  def basePackage = 'org.example.orchestra.springboot'
  invokerPackage = basePackage
  modelPackage = "${basePackage}.model"
  apiPackage = "${basePackage}.api"
  configOptions.putAll(configPackage: "${basePackage}.config")

  configOptions.putAll(
    // generate Api Delegate classes to enable simple implementation by providing a spring Bean
    delegatePattern: 'true',
    useSpringBoot3: 'true',
  )

  // skip generating some extraneous things
  generateApiDocumentation  = false
  openapiGeneratorIgnoreList = ['pom.xml', 'src/test/']
  configOptions.putAll([
    documentationProvider: 'none',
    openApiNullable: 'false',
  ])

  outputDir = generatedSourceDir.get().toString()
}

// ensure the code is generated before java is compiled and that it is in our main sourceSet
tasks.named('compileJava') { dependsOn(openApiGenerate) }
sourceSets.main.java.srcDir generatedSourceDir.get().dir('src/main/java')

// Exclude generated code from spotless
spotless {
  java {
    targetExclude "${layout.projectDirectory.getAsFile().relativePath(generatedSourceDir.get().asFile)}/**" as String
  }
}
